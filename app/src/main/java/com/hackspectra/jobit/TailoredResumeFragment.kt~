package com.hackspectra.jobit.view

import android.content.ContentValues
import android.os.Build
import android.os.Bundle
import android.os.Environment
import android.provider.MediaStore
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.webkit.WebView
import android.widget.Button
import android.widget.TextView
import android.widget.Toast
import androidx.fragment.app.Fragment
import androidx.fragment.app.activityViewModels
import com.hackspectra.jobit.R
import com.hackspectra.jobit.viewModel.ResumeViewModel
import com.itextpdf.text.Document
import com.itextpdf.text.html.simpleparser.HTMLWorker
import com.itextpdf.text.pdf.PdfWriter
import com.itextpdf.tool.xml.XMLWorkerHelper
import java.io.File
import java.io.FileOutputStream
import java.io.StringReader
import java.io.OutputStream
import java.nio.charset.Charset

class TailoredResumeFragment : Fragment() {
    // Use activityViewModels delegate to share the ViewModel with ResumeFragment
    private val viewModel: ResumeViewModel by activityViewModels()

    private lateinit var atsScoreTextView: TextView
    private lateinit var resumeWebView: WebView
    private lateinit var downloadButton: Button

    private var tailoredResumeContent: String? = null
    private var atsScore: Int = 0

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        val view = inflater.inflate(R.layout.fragment_tailored_resume, container, false)

        atsScoreTextView = view.findViewById(R.id.ats_score_text)
        resumeWebView = view.findViewById(R.id.resume_web_view)
        downloadButton = view.findViewById(R.id.download_button)

        setupObservers()

        downloadButton.setOnClickListener { downloadResume() }

        return view
    }

    private fun setupObservers() {
        viewModel.processingState.observe(viewLifecycleOwner) { state ->
            if (!state.isLoading && state.tailoredResume != null) {
                tailoredResumeContent = state.tailoredResume
                atsScore = state.atsScore

                // Update UI
                atsScoreTextView.text = "ATS Score: $atsScore/100"
                displayResumeInWebView(state.tailoredResume)
            }
        }
    }

    private fun displayResumeInWebView(resumeContent: String) {
        val htmlContent = formatToCompactHtml(resumeContent)
        resumeWebView.loadDataWithBaseURL(null, htmlContent, "text/html", "UTF-8", null)
    }

    private fun downloadResume() {
        val content = tailoredResumeContent ?: return

        try {
            // Create file in Downloads directory
            val fileName = "Tailored_Resume_${System.currentTimeMillis()}.pdf"

            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                // For Android 10+
                val values = ContentValues().apply {
                    put(MediaStore.Downloads.DISPLAY_NAME, fileName)
                    put(MediaStore.Downloads.MIME_TYPE, "application/pdf")
                }

                val resolver = requireContext().contentResolver
                val uri = resolver.insert(MediaStore.Downloads.EXTERNAL_CONTENT_URI, values)

                uri?.let { safeUri ->
                    resolver.openOutputStream(safeUri)?.use { outputStream ->
                        generatePDF(outputStream, formatToCompactHtml(content))
                        Toast.makeText(context, "Resume downloaded to Downloads folder", Toast.LENGTH_LONG).show()
                    }
                }
            } else {
                // For older Android versions
                val downloadsDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS)
                val file = File(downloadsDir, fileName)

                FileOutputStream(file).use { outputStream ->
                    generatePDF(outputStream, formatToCompactHtml(content))
                    Toast.makeText(context, "Resume downloaded to Downloads folder", Toast.LENGTH_LONG).show()
                }
            }
        } catch (e: Exception) {
            Toast.makeText(context, "Error downloading resume: ${e.message}", Toast.LENGTH_LONG).show()
            e.printStackTrace()
        }
    }

    private fun formatToCompactHtml(content: String): String {
        return """
        <html>
        <head>
            <style>
                body {
                    font-family: Arial, sans-serif;
                    font-size: 10px;
                    line-height: 1.4;
                    margin: 20px;
                }
                h1, h2 {
                    font-size: 12px;
                    margin-bottom: 4px;
                }
                .section {
                    margin-bottom: 10px;
                }
                ul {
                    padding-left: 15px;
                    margin-top: 4px;
                }
                li {
                    margin-bottom: 2px;
                }
            </style>
        </head>
        <body>
            $content
        </body>
        </html>
    """.trimIndent()
    }


    private fun generatePDF(outputStream: OutputStream, content: String) {
        try {
            val document = Document()
            PdfWriter.getInstance(document, outputStream)
            document.open()

            // Convert HTML content to PDF using XMLWorkerHelper
            val htmlInput = content.byteInputStream()
            XMLWorkerHelper.getInstance().parseXHtml(
                PdfWriter.getInstance(document, outputStream),
                document,
                htmlInput,
                null,
                Charset.forName("UTF-8")
            )

            document.close()
        } catch (e: Exception) {
            e.printStackTrace()
            throw e
        }
    }
}