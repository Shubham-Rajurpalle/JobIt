package com.hackspectra.jobit.viewModel

import android.content.Context
import android.net.Uri
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.itextpdf.text.pdf.PdfReader
import com.itextpdf.text.pdf.parser.PdfTextExtractor
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.RequestBody.Companion.toRequestBody
import org.json.JSONArray
import org.json.JSONObject
import java.io.FileInputStream
import java.util.concurrent.TimeUnit

class ResumeViewModel : ViewModel() {
    private val _processingState = MutableLiveData<ProcessingState>()
    val processingState: LiveData<ProcessingState> = _processingState

    data class ProcessingState(
        val isLoading: Boolean = false,
        val error: String? = null,
        val tailoredResume: String? = null,
        val atsScore: Int = 0
    )

    fun processResume(context: Context, resumeUri: Uri, jobDescription: String) {
        _processingState.value = ProcessingState(isLoading = true)

        viewModelScope.launch {
            try {
                // Extract text from PDF
                val resumeText = extractTextFromPdf(context, resumeUri)

                // Call Gemini API
                val result = callGeminiAPI(resumeText, jobDescription)

                _processingState.value = ProcessingState(
                    isLoading = false,
                    tailoredResume = result.first,
                    atsScore = result.second
                )
            } catch (e: Exception) {
                _processingState.value = ProcessingState(
                    isLoading = false,
                    error = e.message ?: "An unknown error occurred"
                )
            }
        }
    }

    private suspend fun extractTextFromPdf(context: Context, pdfUri: Uri): String = withContext(Dispatchers.IO) {
        val fileDescriptor = context.contentResolver.openFileDescriptor(pdfUri, "r")
        val text = StringBuilder()

        fileDescriptor?.use { parcelFD ->
            val reader = PdfReader(FileInputStream(parcelFD.fileDescriptor))
            val pages = reader.numberOfPages

            for (i in 1..pages) {
                text.append(PdfTextExtractor.getTextFromPage(reader, i))
            }

            reader.close()
        }

        return@withContext text.toString()
    }

    private suspend fun callGeminiAPI(resumeText: String, jobDescription: String): Pair<String, Int> = withContext(Dispatchers.IO) {
        try {
            val client = OkHttpClient.Builder()
                .connectTimeout(60, TimeUnit.SECONDS)
                .readTimeout(60, TimeUnit.SECONDS)
                .writeTimeout(60, TimeUnit.SECONDS)
                .build()

            val apiKey = "AIzaSyC9tFmdeECroMCVHPEklvFCBN04HioBHbU"  // Your Gemini API key
            val mediaType = "application/json".toMediaType()

            // Updated correct endpoint for Gemini API
            val url = "https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent?key=$apiKey"

            val prompt = """
            You are an expert ATS-friendly resume optimizer.

            TASK:
            1. Analyze the provided resume against the job description
            2. Create a tailored version that is optimized for ATS systems
            3. Provide an ATS compatibility score from 0-100

            FORMAT YOUR RESPONSE EXACTLY AS FOLLOWS:
            1. First provide the tailored resume as a clean HTML document between <html></html> tags
            2. After the HTML, include a line with "ATS Score: [score]" where [score] is a number from 0-100

            RESUME:
            $resumeText

            JOB DESCRIPTION:
            $jobDescription
            """.trimIndent()

            val requestBody = JSONObject().apply {
                put("contents", JSONArray().apply {
                    put(JSONObject().apply {
                        put("parts", JSONArray().apply {
                            put(JSONObject().put("text", prompt))
                        })
                    })
                })
                put("generationConfig", JSONObject().apply {
                    put("temperature", 0.4)
                    put("topK", 32)
                    put("topP", 0.95)
                    put("maxOutputTokens", 8192)
                })
            }

            val request = Request.Builder()
                .url(url)
                .post(requestBody.toString().toRequestBody(mediaType))
                .addHeader("Content-Type", "application/json")
                .build()

            val response = client.newCall(request).execute()

            if (!response.isSuccessful) {
                val errorBody = response.body?.string() ?: "No error details"
                println("API Error Response: $errorBody")
                // Fall back to local formatting implementation
                return@withContext formatResumeLocally(resumeText, jobDescription)
            }

            val responseBody = response.body?.string() ?: throw Exception("Empty response from Gemini")

            // Debug log
            println("Gemini Response: $responseBody")

            val jsonResponse = JSONObject(responseBody)

            // Parse response with fallback options
            if (!jsonResponse.has("candidates") || jsonResponse.getJSONArray("candidates").length() == 0) {
                println("No candidates in response, using local formatting")
                return@withContext formatResumeLocally(resumeText, jobDescription)
            }

            val content = jsonResponse
                .getJSONArray("candidates")
                .getJSONObject(0)
                .getJSONObject("content")
                .getJSONArray("parts")
                .getJSONObject(0)
                .getString("text")

            // Extract HTML content
            val htmlPattern = "<html>(.*?)</html>".toRegex(RegexOption.DOT_MATCHES_ALL)
            val htmlMatch = htmlPattern.find(content)
            val htmlContent = if (htmlMatch != null) {
                "<html>${htmlMatch.groupValues[1]}</html>"
            } else {
                // Fallback if no HTML tags found
                "<html><body>${content.replace("\n", "<br>")}</body></html>"
            }

            // Extract ATS score
            var atsScore = 0
            val atsRegex = "ATS Score:\\s*(\\d+)".toRegex()
            val match = atsRegex.find(content)
            atsScore = match?.groupValues?.get(1)?.toIntOrNull() ?: 70 // Default to 70 if not found

            return@withContext Pair(htmlContent, atsScore)
        } catch (e: Exception) {
            println("Error calling Gemini API: ${e.message}")
            e.printStackTrace()
            // Use local formatting instead of mock data
            return@withContext formatResumeLocally(resumeText, jobDescription)
        }
    }

    // Format the resume using the actual user's content without AI assistance
    private suspend fun formatResumeLocally(resumeText: String, jobDescription: String): Pair<String, Int> = withContext(Dispatchers.IO) {
        // Extract actual resume sections
        val parsedResume = parseResumeContent(resumeText)

        // Get keywords from job description for highlighting
        val jobKeywords = extractKeywords(jobDescription)

        // Format HTML with user's actual content
        val formattedHtml = """
        <html>
        <head>
            <style>
                body { font-family: 'Arial', 'Helvetica', sans-serif; line-height: 1.5; margin: 20px; color: #333; }
                h1 { font-size: 24px; color: #000; margin-bottom: 5px; border-bottom: 1px solid #ddd; padding-bottom: 5px; }
                h2 { font-size: 18px; color: #1a73e8; margin-top: 15px; margin-bottom: 10px; border-bottom: 1px solid #eee; padding-bottom: 3px; }
                h3 { font-size: 16px; margin-bottom: 5px; color: #333; }
                .contact-info { margin-bottom: 20px; font-size: 14px; }
                .section { margin-bottom: 20px; }
                .job-title, .project-name, .degree { font-weight: bold; margin-bottom: 3px; }
                .company, .institution { font-weight: bold; color: #555; }
                .dates { font-style: italic; color: #666; }
                ul { margin-top: 5px; padding-left: 25px; }
                li { margin-bottom: 5px; }
                .skill-tag { 
                    background-color: #e8f0fe; 
                    padding: 2px 8px; 
                    border-radius: 3px; 
                    margin-right: 5px;
                    margin-bottom: 5px;
                    display: inline-block;
                    font-size: 13px;
                }
                .highlight { font-weight: bold; color: #1a73e8; }
                
                @media print {
                    body { font-size: 11pt; line-height: 1.3; margin: 0.5in; }
                    .page-break { page-break-before: always; }
                }
            </style>
        </head>
        <body>
            <!-- Header section with name and contact info -->
            <h1>${parsedResume.name}</h1>
            <div class="contact-info">
                ${parsedResume.contactInfo}
            </div>
            
            <!-- Skills section -->
            ${if (parsedResume.skills.isNotEmpty()) """
            <div class="section">
                <h2>Skills</h2>
                <div>
                    ${parsedResume.skills.map { skill ->
            "<span class='skill-tag'>${highlightIfKeyword(skill, jobKeywords)}</span>"
        }.joinToString(" ")}
                </div>
            </div>
            """ else ""}
            
            <!-- Experience section -->
            ${if (parsedResume.experience.isNotEmpty()) """
            <div class="section">
                <h2>Experience</h2>
                ${parsedResume.experience.joinToString("\n") { job ->
            """
                    <div>
                        <h3 class="job-title">${job.title}</h3>
                        <p class="company">${job.company} <span class="dates">${job.dates}</span></p>
                        <ul>
                            ${job.responsibilities.joinToString("\n") { resp ->
                "<li>${highlightKeywords(resp, jobKeywords)}</li>"
            }}
                        </ul>
                    </div>
                    """
        }}
            </div>
            """ else ""}
            
            <!-- Projects section -->
            ${if (parsedResume.projects.isNotEmpty()) """
            <div class="section">
                <h2>Projects</h2>
                ${parsedResume.projects.joinToString("\n") { project ->
            """
                    <div>
                        <h3 class="project-name">${project.name}</h3>
                        ${if (project.dates.isNotBlank()) "<p class='dates'>${project.dates}</p>" else ""}
                        <ul>
                            ${project.details.joinToString("\n") { detail ->
                "<li>${highlightKeywords(detail, jobKeywords)}</li>"
            }}
                        </ul>
                    </div>
                    """
        }}
            </div>
            """ else ""}
            
            <!-- Education section -->
            ${if (parsedResume.education.isNotEmpty()) """
            <div class="section">
                <h2>Education</h2>
                ${parsedResume.education.joinToString("\n") { edu ->
            """
                    <div>
                        <h3 class="degree">${edu.degree}</h3>
                        <p class="institution">${edu.institution} <span class="dates">${edu.dates}</span></p>
                        ${if (edu.gpa.isNotBlank()) "<p>GPA: ${edu.gpa}</p>" else ""}
                    </div>
                    """
        }}
            </div>
            """ else ""}
            
            <!-- Additional sections -->
            ${parsedResume.additionalSections.joinToString("\n") { section ->
            """
                <div class="section">
                    <h2>${section.title}</h2>
                    <ul>
                        ${section.content.joinToString("\n") { content ->
                "<li>${highlightKeywords(content, jobKeywords)}</li>"
            }}
                    </ul>
                </div>
                """
        }}
        </body>
        </html>
        """.trimIndent()

        // Calculate ATS score based on keyword matching
        val atsScore = calculateAtsScore(resumeText, jobDescription)

        return@withContext Pair(formattedHtml, atsScore)
    }

    // Parse resume content into structured data
    private fun parseResumeContent(resumeText: String): ResumeData {
        val lines = resumeText.split("\n").filter { it.isNotBlank() }
        val parsedResume = ResumeData()

        // Try to extract the name (usually first line)
        if (lines.isNotEmpty()) {
            parsedResume.name = lines[0].trim()
        }

        // Extract contact info (typically in the first few lines)
        val contactInfo = StringBuilder()
        for (i in 1 until minOf(lines.size, 5)) {
            val line = lines[i].trim()
            if (line.contains("@") ||
                line.contains("linkedin") ||
                line.contains("github") ||
                line.contains(Regex("\\d{3}[-.\\s]?\\d{3}[-.\\s]?\\d{4}"))) {
                contactInfo.append(line).append("<br>")
            }
        }
        parsedResume.contactInfo = contactInfo.toString()

        // Identify sections
        val sectionStartIndices = mutableMapOf<String, Int>()
        val sectionNames = listOf("Experience", "Skills", "Education", "Projects", "Work Experience",
            "Technical Skills", "Professional Experience", "Employment",
            "Certifications", "Awards", "Publications", "Leadership",
            "Volunteering", "Interests", "Languages", "References",
            "Achievements", "Extracurricular", "Technical Problem Solving",
            "Leadership & Entrepreneurship")

        for (i in lines.indices) {
            val line = lines[i].trim()
            for (section in sectionNames) {
                if (line.equals(section, ignoreCase = true) ||
                    line.startsWith("$section:") ||
                    line.startsWith("$section ")) {
                    sectionStartIndices[section] = i
                    break
                }
            }
        }

        // Sort sections by their appearance in the resume
        val sortedSections = sectionStartIndices.toList().sortedBy { it.second }

        // Process each section
        for (i in sortedSections.indices) {
            val (sectionName, startIndex) = sortedSections[i]
            val endIndex = if (i < sortedSections.size - 1) sortedSections[i + 1].second else lines.size

            val sectionContent = lines.subList(startIndex + 1, endIndex)

            when {
                sectionName.contains("Experience", ignoreCase = true) ||
                        sectionName.contains("Employment", ignoreCase = true) -> {
                    parsedResume.experience.addAll(parseExperienceSection(sectionContent))
                }

                sectionName.contains("Skills", ignoreCase = true) -> {
                    parsedResume.skills.addAll(parseSkillsSection(sectionContent))
                }

                sectionName.contains("Education", ignoreCase = true) -> {
                    parsedResume.education.addAll(parseEducationSection(sectionContent))
                }

                sectionName.contains("Projects", ignoreCase = true) -> {
                    parsedResume.projects.addAll(parseProjectsSection(sectionContent))
                }

                else -> {
                    // Handle additional sections
                    parsedResume.additionalSections.add(
                        AdditionalSection(
                            title = sectionName,
                            content = sectionContent
                        )
                    )
                }
            }
        }

        return parsedResume
    }

    private fun parseExperienceSection(lines: List<String>): List<JobExperience> {
        val jobs = mutableListOf<JobExperience>()
        var currentJob: JobExperience? = null
        var collectingResponsibilities = false

        for (line in lines) {
            val trimmedLine = line.trim()

            when {
                // New job entry - typically contains a job title and possibly company name
                trimmedLine.length < 60 && (
                        trimmedLine.contains("Developer", ignoreCase = true) ||
                                trimmedLine.contains("Engineer", ignoreCase = true) ||
                                trimmedLine.contains("Manager", ignoreCase = true) ||
                                trimmedLine.contains("Intern", ignoreCase = true) ||
                                trimmedLine.contains("Analyst", ignoreCase = true) ||
                                trimmedLine.contains("Specialist", ignoreCase = true) ||
                                trimmedLine.contains("Lead", ignoreCase = true)
                        ) -> {
                    // Save previous job if there is one
                    if (currentJob != null && currentJob.title.isNotBlank()) {
                        jobs.add(currentJob)
                    }

                    // Start new job
                    currentJob = JobExperience(title = trimmedLine)
                    collectingResponsibilities = false
                }

                // Company name and dates (usually contains year or date markers)
                currentJob != null && currentJob.company.isBlank() &&
                        (trimmedLine.contains("20") || trimmedLine.contains("Present", ignoreCase = true)) -> {
                    // If line contains a date, split into company and dates
                    val parts = trimmedLine.split(Regex("\\s*[|,]\\s*|\\s+(?=\\d)"))
                    if (parts.size > 1) {
                        currentJob.company = parts[0].trim()
                        currentJob.dates = parts.subList(1, parts.size).joinToString(" ").trim()
                    } else {
                        // If we couldn't split, just use the whole line as company
                        currentJob.company = trimmedLine
                    }
                }

                // Bullet points or responsibilities
                trimmedLine.startsWith("•") || trimmedLine.startsWith("-") || trimmedLine.startsWith("*") -> {
                    collectingResponsibilities = true
                    val cleanLine = trimmedLine.removePrefix("•").removePrefix("-").removePrefix("*").trim()
                    currentJob?.responsibilities?.add(cleanLine)
                }

                // Continuation of responsibilities list
                collectingResponsibilities -> {
                    // If we're collecting responsibilities and the line doesn't look like a new section
                    currentJob?.responsibilities?.add(trimmedLine)
                }

                // If it's not a bullet point and we're not collecting responsibilities,
                // and current job has no company yet, assume it's the company name
                currentJob != null && currentJob.company.isBlank() -> {
                    currentJob.company = trimmedLine
                }
            }
        }

        // Add the last job if there is one
        if (currentJob != null && currentJob.title.isNotBlank()) {
            jobs.add(currentJob)
        }

        return jobs
    }

    private fun parseSkillsSection(lines: List<String>): List<String> {
        val skills = mutableListOf<String>()

        for (line in lines) {
            val trimmedLine = line.trim()

            // Skip lines that seem to be category headers
            if (trimmedLine.endsWith(":") || trimmedLine.length < 3) {
                continue
            }

            // Handle skills that might be separated by commas, bullets, or other delimiters
            if (trimmedLine.contains(",") || trimmedLine.contains("•") ||
                trimmedLine.contains(" - ") || trimmedLine.contains("| ")) {

                // Split by common delimiters
                val skillItems = trimmedLine.split(Regex("[,•|]|-"))
                    .map { it.trim() }
                    .filter { it.isNotBlank() }

                skills.addAll(skillItems)
            } else {
                // If no delimiters, add the whole line as one skill
                skills.add(trimmedLine)
            }
        }

        return skills
    }

    private fun parseEducationSection(lines: List<String>): List<Education> {
        val educationEntries = mutableListOf<Education>()
        var currentEdu: Education? = null

        for (line in lines) {
            val trimmedLine = line.trim()

            // If line contains common education terms, it's likely a new education entry
            if (trimmedLine.contains("University", ignoreCase = true) ||
                trimmedLine.contains("College", ignoreCase = true) ||
                trimmedLine.contains("Institute", ignoreCase = true) ||
                trimmedLine.contains("School", ignoreCase = true)) {

                // Save previous education entry if there is one
                if (currentEdu != null && currentEdu.institution.isNotBlank()) {
                    educationEntries.add(currentEdu)
                }

                // Start new education entry
                currentEdu = Education(institution = trimmedLine)
            }
            // If line contains degree-related terms
            else if (currentEdu != null && currentEdu.degree.isBlank() &&
                (trimmedLine.contains("Bachelor", ignoreCase = true) ||
                        trimmedLine.contains("Master", ignoreCase = true) ||
                        trimmedLine.contains("Ph.D", ignoreCase = true) ||
                        trimmedLine.contains("B.", ignoreCase = true) ||
                        trimmedLine.contains("M.", ignoreCase = true))) {

                currentEdu.degree = trimmedLine
            }
            // If line contains date information
            else if (currentEdu != null && currentEdu.dates.isBlank() &&
                (trimmedLine.contains("20") ||
                        trimmedLine.contains("-") ||
                        trimmedLine.contains("–") ||
                        trimmedLine.contains("to", ignoreCase = true))) {

                currentEdu.dates = trimmedLine
            }
            // If line contains GPA information
            else if (currentEdu != null &&
                (trimmedLine.contains("GPA", ignoreCase = true) ||
                        trimmedLine.contains("CGPA", ignoreCase = true))) {

                currentEdu.gpa = trimmedLine
            }
            // If this line doesn't match any of the above and degree is still blank,
            // it might be a degree or program
            else if (currentEdu != null && currentEdu.degree.isBlank()) {
                currentEdu.degree = trimmedLine
            }
        }

        // Add the last education entry if there is one
        if (currentEdu != null && currentEdu.institution.isNotBlank()) {
            educationEntries.add(currentEdu)
        }

        return educationEntries
    }

    private fun parseProjectsSection(lines: List<String>): List<Project> {
        val projects = mutableListOf<Project>()
        var currentProject: Project? = null
        var collectingDetails = false

        for (line in lines) {
            val trimmedLine = line.trim()

            when {
                // New project entry - typically project name or title
                // Project names are usually short and don't contain bullet points
                trimmedLine.length < 60 &&
                        !trimmedLine.startsWith("•") &&
                        !trimmedLine.startsWith("-") &&
                        !trimmedLine.startsWith("*") -> {
                    // Save previous project if there is one
                    if (currentProject != null && currentProject.name.isNotBlank()) {
                        projects.add(currentProject)
                    }

                    // Start new project
                    currentProject = Project(name = trimmedLine)
                    collectingDetails = false
                }

                // Dates (usually contains year)
                currentProject != null && currentProject.dates.isBlank() &&
                        (trimmedLine.contains("20") ||
                                trimmedLine.contains("Present", ignoreCase = true)) -> {
                    currentProject.dates = trimmedLine
                }

                // Bullet points or details
                trimmedLine.startsWith("•") || trimmedLine.startsWith("-") || trimmedLine.startsWith("*") -> {
                    collectingDetails = true
                    val cleanLine = trimmedLine.removePrefix("•").removePrefix("-").removePrefix("*").trim()
                    currentProject?.details?.add(cleanLine)
                }

                // Continuation of details list
                collectingDetails && currentProject != null -> {
                    // If we're collecting details and the line doesn't look like a new section
                    currentProject.details.add(trimmedLine)
                }

                // If it doesn't match any of the above patterns and we have a current project,
                // and it doesn't have dates yet, it might be a subtitle or technology stack
                currentProject != null && currentProject.dates.isBlank() -> {
                    currentProject.dates = trimmedLine
                }
            }
        }

        // Add the last project if there is one
        if (currentProject != null && currentProject.name.isNotBlank()) {
            projects.add(currentProject)
        }

        return projects
    }

    private fun highlightKeywords(text: String, keywords: List<String>): String {
        var result = text
        for (keyword in keywords) {
            val regex = "\\b${Regex.escape(keyword)}\\b".toRegex(RegexOption.IGNORE_CASE)
            result = result.replace(regex) { matchResult ->
                "<span class=\"highlight\">${matchResult.value}</span>"
            }
        }
        return result
    }

    private fun highlightIfKeyword(text: String, keywords: List<String>): String {
        for (keyword in keywords) {
            if (text.equals(keyword, ignoreCase = true)) {
                return "<span class=\"highlight\">$text</span>"
            }
        }
        return text
    }

    private fun extractKeywords(jobDescription: String): List<String> {
        val commonJobKeywords = listOf(
            "Android", "Kotlin", "Java", "MVVM", "Architecture", "UI/UX", "Material Design",
            "Jetpack", "Compose", "Firebase", "API", "Mobile", "App", "Testing", "Git",
            "Agile", "CI/CD", "Performance", "Optimization", "React Native", "JavaScript",
            "Python", "C++", "HTML", "CSS", "Web Development", "Frontend", "Backend",
            "SQLite", "Room", "Database", "RESTful", "Retrofit", "Coroutines", "LiveData",
            "ViewModel", "TDD", "Redux", "React", "Figma", "Expo"
        )

        // Extract keywords that appear in the job description
        return commonJobKeywords.filter {
            jobDescription.contains(it, ignoreCase = true)
        }.plus(
            // Add additional relevant tech keywords that might be in the job description
            jobDescription.split(" ", "\n", ",", ".", "(", ")")
                .filter { it.length > 4 }
                .filter { it[0].isUpperCase() }
                .filter { it.all { char -> char.isLetterOrDigit() || char == '+' || char == '#' } }
                .map { it.trim() }
        ).distinct()
    }

    private fun calculateAtsScore(resumeText: String, jobDescription: String): Int {
        // Extract keywords from job description
        val keywords = extractKeywords(jobDescription)

        // Count how many keywords appear in the resume text
        var matchCount = 0
        var totalKeywords = 0

        for (keyword in keywords) {
            totalKeywords++
            if (resumeText.contains(keyword, ignoreCase = true)) {
                matchCount++
            }
        }

        // Base score from keyword matches (70% of total score)
        val baseScore = if (totalKeywords == 0) 50 else (matchCount.toFloat() / totalKeywords) * 70

        // Structure score (30% of total score)
        var structureScore = 0

        // Check for common resume sections
        val sections = listOf("Experience", "Education", "Projects", "Skills")
        for (section in sections) {
            if (resumeText.contains(section, ignoreCase = true)) {
                structureScore += 5
            }
        }

        // Check for contact information
        if (resumeText.contains("@")) {
            structureScore += 5
        }

        // Check for bullet points (indicates good formatting)
        if (resumeText.contains("•") || resumeText.contains("- ")) {
            structureScore += 5
        }

        // Return final score, capped at 100
        return (baseScore + structureScore).toInt().coerceIn(50, 100)
    }

    data class ResumeData(
        var name: String = "",
        var contactInfo: String = "",
        val skills: MutableList<String> = mutableListOf(),
        val experience: MutableList<JobExperience> = mutableListOf(),
        val education: MutableList<Education> = mutableListOf(),
        val projects: MutableList<Project> = mutableListOf(),
        val additionalSections: MutableList<AdditionalSection> = mutableListOf()
    )

    data class JobExperience(
        var title: String = "",
        var company: String = "",
        var dates: String = "",
        val responsibilities: MutableList<String> = mutableListOf()
    )

    data class Education(
        var institution: String = "",
        var degree: String = "",
        var dates: String = "",
        var gpa: String = ""
    )

    data class Project(
        var name: String = "",
        var dates: String = "",
        val details: MutableList<String> = mutableListOf()
    )
    